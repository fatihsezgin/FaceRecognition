from math import sqrt

import numpy
import cv2

'''In this project face recognition is made with LBPH algorithm. 
    In order to apply the algorithm
    1. Input image should be converted to gray scale
    2. Faces should be detected in gray scaled image
    3. Crop the face from the image
    4. Local Binary Pattern algorithm should be applied
    5. Divide face into equal size of regions (in this project 8x8=64 regions used)
    6. Calculate histogram of each region
    7. Concatenate histograms of each region
    8. Calculate distance between saved histogram
    9. Find the least distance (Euclidean algorithm is used in this project)
    10. Input image is belong to owner of the histogram that has the least distance 
        between histogram of the input image
        
    In addition, we have added an optimization algorithm that make recognition more accurately'''


def get_gray_scale(frame):
    # First step of the algorithm -> Convert input image to gray scale
    return cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)


def detect_faces(frame):
    # Face detection is made
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    gray_scale = get_gray_scale(frame)
    faces = face_cascade.detectMultiScale(gray_scale, scaleFactor=1.2, minNeighbors=5, minSize=(30, 30),
                                          flags=cv2.CASCADE_SCALE_IMAGE)
    # If there are more than two faces in image the biggest one (means the closest one) is determined
    maxArea = 0
    bound = (0, 0, 0, 0)
    for (x, y, w, h) in faces:
        area = w * h
        if area > maxArea:
            bound = (x, y, w, h)
            maxArea = area
    return bound, gray_scale[bound[1]:bound[1] + bound[3], bound[0]:bound[0] + bound[2]]


def get_lbp(crop):
    # Local Binary Pattern algorithm is applied to cropped image (explained in report)
    cropH = crop.shape[0]
    cropW = crop.shape[1]
    lbpImg = numpy.zeros(shape=(cropH, cropW))
    for i in range(crop.shape[0]):  # traverses through height of the image
        for j in range(crop.shape[1]):  # traverses through width of the image
            if i != 0 and i != cropH - 1 and j != 0 and j != cropW - 1:
                threshold = crop[i][j]
                binary: str = ''
                for k in range(3):
                    for m in range(3):
                        if k != 1 or 1 != m:
                            if crop[i + k - 1][j + m - 1] >= threshold:
                                binary = binary + '1'
                            else:
                                binary = binary + '0'
                lbpImg[i][j] = int(binary, 2) / 255
            else:
                lbpImg[i][j] = crop[i][j] / 255
    return lbpImg


def cal_histogram(lbp_img):
    # Histogram of the image generated by LBP algorithm is calculated
    imgArea = lbp_img.shape[0] * lbp_img.shape[1]
    regionH = int(lbp_img.shape[0] / 8)  # LBP image is divided into regions
    regionW = int(lbp_img.shape[1] / 8)
    histogram = numpy.zeros(shape=256 * 8 * 8)  # Each pixel of image may be between 0-255 and there are 64 regions
    for i in range(64):  # Histogram of each region is calculated and concatenated
        for a in range(regionH):
            for b in range(regionW):
                y = regionH * int(i / 8) + a
                x = regionW * int(i % 8) + b
                index = int(lbp_img[y][x] * 255) + (i * 256)
                histogram[index] = histogram[index] + 1
    for d in range(256 * 8 * 8):
        histogram[d] = histogram[d] / imgArea
    return histogram


def compare_histograms(his1, his2):
    # Compares the two given histograms and finds the distance between them
    if len(his1) != len(his2):
        return -1
    distance = 0
    for ite in range(len(his2)):
        distance = distance + (his1[ite] - his2[ite]) * (his1[ite] - his2[ite])

    return sqrt(distance)


def optimize(crop_arr):
    # Optimization of the given images is made (explained in report)
    size = len(crop_arr)
    vote = numpy.zeros(size)
    diff = numpy.zeros(shape=(size, size))
    for fIndex in range(size):
        diff[fIndex][fIndex] = 0.0
        for sIndex in range(fIndex + 1, size):
            lbp1 = get_lbp(crop_arr[fIndex])
            hist1 = cal_histogram(lbp1)
            lbp2 = get_lbp(crop_arr[sIndex])
            hist2 = cal_histogram(lbp2)
            difference = compare_histograms(hist1, hist2)
            diff[fIndex][sIndex] = difference
            diff[sIndex][fIndex] = difference
    for tIndex in range(size):
        arr = diff[tIndex]
        leastIndex = 0
        least = arr[0]
        for foIndex in range(size):
            if tIndex != foIndex:
                if arr[foIndex] < least:
                    least = arr[foIndex]
                    leastIndex = foIndex
        vote[leastIndex] = vote[leastIndex] + 1
    presidentIndex = 0
    for candidate in range(size):
        if vote[candidate] > vote[presidentIndex]:
            presidentIndex = candidate
    return crop_arr[presidentIndex]
